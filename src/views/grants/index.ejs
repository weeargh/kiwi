<div class="row">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-header d-flex justify-content-between align-items-center py-3">
        <h6 class="mb-0 fw-bold">Grants</h6>
        <div>
          <a href="/grants/new" class="btn btn-sm btn-primary">
            <i class="bi bi-plus-lg me-1"></i> Create Grant
          </a>
          <% if (isAdmin) { %>
            <button class="btn btn-sm btn-outline-success ms-1" data-bs-toggle="modal" data-bs-target="#importGrantsModal">
              <i class="bi bi-upload me-1"></i> Import Grants
            </button>
            <a href="/templates/grants-import-template.xlsx" class="btn btn-link btn-sm ms-1">Download Template</a>
          <% } %>
          <% if (grants.length > 0) { %>
            <button class="btn btn-sm btn-outline-primary ms-1" id="exportGrantsBtn">
              <i class="bi bi-download me-1"></i> Export
            </button>
          <% } %>
        </div>
      </div>
      
      <div class="card-body p-0">
        <!-- Filters -->
        <div class="p-3 border-bottom">
          <form action="/grants" method="GET" class="row g-2 align-items-center">
            <div class="col-md-5">
              <div class="input-group">
                <input 
                  type="text" 
                  class="form-control" 
                  placeholder="Search by name, email, or Grant ID" 
                  name="search" 
                  value="<%= filters.search %>"
                >
                <button class="btn btn-outline-secondary" type="submit">
                  <i class="bi bi-search"></i>
                </button>
              </div>
            </div>
            <div class="col-md-3">
              <select class="form-select" name="status" id="grantStatusFilter">
                <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Status</option>
                <option value="active" <%= (!filters.status || filters.status === 'active') ? 'selected' : '' %>>Active</option>
                <option value="inactive" <%= filters.status === 'inactive' ? 'selected' : '' %>>Terminated</option>
              </select>
            </div>
            <div class="col-md-4 text-md-end d-flex align-items-center justify-content-end gap-2">
              <% if (totalCount > 0) { %>
                <span class="text-muted"><%= totalCount %> grant<%= totalCount !== 1 ? 's' : '' %> found</span>
              <% } %>
              <% if (filters.search || (filters.status && filters.status !== 'all')) { %>
                <a href="/grants" class="btn btn-link btn-sm ms-2">Clear Filters</a>
              <% } %>
            </div>
          </form>
        </div>
        
        <!-- Grants Table -->
        <div class="table-responsive">
          <table class="table table-hover mb-0" id="grantsTable">
            <thead class="table-light">
              <tr>
                <th>Employee</th>
                <th>Grant Date</th>
                <th class="text-end">Shares</th>
                <th>Status</th>
                <th class="text-end">Vested</th>
                <th class="text-end">Unvested</th>
                <% if (ppsAvailable) { %>
                  <th class="text-end">Value</th>
                <% } %>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (grants.length > 0) { %>
                <% grants.forEach(function(grant) { %>
                  <tr>
                    <td>
                      <a href="/employees/<%= grant.employeeUid %>" class="text-decoration-none">
                        <%= grant.employeeName %>
                      </a>
                    </td>
                    <td><%= grant.grantDate %></td>
                    <td class="text-end"><%= (typeof grant.shareAmount !== 'undefined' && grant.shareAmount !== null && !isNaN(grant.shareAmount)) ? Number(grant.shareAmount).toLocaleString('en-US', { minimumFractionDigits: decimalPlaces, maximumFractionDigits: decimalPlaces }) : '0.000' %></td>
                    <td>
                      <span class="badge bg-<%= grant.statusBadge %>">
                        <%= grant.status === 'active' ? 'Active' : 'Terminated' %>
                      </span>
                    </td>
                    <td class="text-end"><%= (typeof grant.vestedAmount !== 'undefined' && grant.vestedAmount !== null && !isNaN(grant.vestedAmount)) ? Number(grant.vestedAmount).toLocaleString('en-US', { minimumFractionDigits: decimalPlaces, maximumFractionDigits: decimalPlaces }) : '0.000' %></td>
                    <td class="text-end"><%= (typeof grant.unvestedAmount !== 'undefined' && grant.unvestedAmount !== null && !isNaN(grant.unvestedAmount)) ? Number(grant.unvestedAmount).toLocaleString('en-US', { minimumFractionDigits: decimalPlaces, maximumFractionDigits: decimalPlaces }) : '0.000' %></td>
                    <% if (ppsAvailable) { %>
                      <td class="text-end"><%= currency %> <%= Number(grant.totalValue).toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 }) %></td>
                    <% } %>
                    <td class="text-end">
                      <a href="/grants/<%= grant.uid %>" class="btn btn-sm btn-outline-secondary" data-bs-toggle="tooltip" title="View Details">
                        <i class="bi bi-eye"></i>
                      </a>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="<%= ppsAvailable ? 7 : 6 %>" class="text-center py-3">
                    <% if (filters.status !== 'all') { %>
                      No grants found matching your search criteria.
                      <a href="/grants">Clear filters</a>
                    <% } else { %>
                      No grants have been created yet.
                      <% if (isAdmin) { %>
                        <a href="/grants/new">Create your first grant</a>
                      <% } %>
                    <% } %>
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
      
      <% if (pagination.total > 1) { %>
        <div class="card-footer">
          <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mb-0">
              <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
                <a class="page-link" href="/grants?page=<%= pagination.prev %>&status=<%= filters.status %>&search=<%= filters.search %>" tabindex="-1" aria-disabled="<%= !pagination.hasPrev %>">Previous</a>
              </li>
              <% let window = 2; %>
              <% let start = Math.max(1, pagination.current - window); %>
              <% let end = Math.min(pagination.total, pagination.current + window); %>
              <% if (start > 1) { %>
                <li class="page-item"><a class="page-link" href="/grants?page=1&status=<%= filters.status %>&search=<%= filters.search %>">1</a></li>
                <% if (start > 2) { %>
                  <li class="page-item disabled"><span class="page-link">&hellip;</span></li>
                <% } %>
              <% } %>
              <% for (let i = start; i <= end; i++) { %>
                <li class="page-item <%= pagination.current === i ? 'active' : '' %>">
                  <a class="page-link" href="/grants?page=<%= i %>&status=<%= filters.status %>&search=<%= filters.search %>"><%= i %></a>
                </li>
              <% } %>
              <% if (end < pagination.total) { %>
                <% if (end < pagination.total - 1) { %>
                  <li class="page-item disabled"><span class="page-link">&hellip;</span></li>
                <% } %>
                <li class="page-item"><a class="page-link" href="/grants?page=<%= pagination.total %>&status=<%= filters.status %>&search=<%= filters.search %>"><%= pagination.total %></a></li>
              <% } %>
              <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
                <a class="page-link" href="/grants?page=<%= pagination.next %>&status=<%= filters.status %>&search=<%= filters.search %>">Next</a>
              </li>
            </ul>
          </nav>
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Grant Import Modal -->
<div class="modal fade" id="importGrantsModal" tabindex="-1" aria-labelledby="importGrantsModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="importGrantsForm" enctype="multipart/form-data">
        <div class="modal-header">
          <h5 class="modal-title" id="importGrantsModalLabel">Import Grants</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="importGrantFile" class="form-label">Select Excel or CSV file</label>
            <input type="file" class="form-control" id="importGrantFile" name="file" accept=".xlsx,.csv" required>
          </div>
          <div id="importGrantPreview" class="mt-3"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">Preview Import</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Export table to CSV
  function exportToCSV() {
    const table = document.getElementById('grantsTable');
    let csv = [];
    
    // Get column headers
    const headers = [];
    const headerRow = table.querySelectorAll('thead th');
    for (let i = 0; i < headerRow.length - 1; i++) { // Skip the Actions column
      headers.push(headerRow[i].textContent.trim());
    }
    csv.push(headers.join(','));
    
    // Get table data
    const rows = table.querySelectorAll('tbody tr');
    for (let i = 0; i < rows.length; i++) {
      const row = [];
      const cells = rows[i].querySelectorAll('td');
      
      // Skip empty state row
      if (cells.length === 1) continue;
      
      for (let j = 0; j < cells.length - 1; j++) { // Skip the Actions column
        let cell = cells[j].textContent.trim();
        
        // Escape commas and quotes
        cell = cell.replace(/"/g, '""');
        if (cell.includes(',') || cell.includes('"') || cell.includes('\n')) {
          cell = `"${cell}"`;
        }
        
        row.push(cell);
      }
      
      csv.push(row.join(','));
    }
    
    // Create CSV file
    const csvContent = csv.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    // Create download link and click it
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'grants.csv');
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Add event listener for export button and status filter
  document.addEventListener('DOMContentLoaded', function() {
    var exportBtn = document.getElementById('exportGrantsBtn');
    if (exportBtn) {
      exportBtn.addEventListener('click', function(e) {
        e.preventDefault();
        exportToCSV();
      });
    }
    var statusFilter = document.getElementById('grantStatusFilter');
    if (statusFilter) {
      statusFilter.addEventListener('change', function() {
        this.form.submit();
      });
    }
  });

  var importForm = document.getElementById('importGrantsForm');
  if (importForm) {
    importForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const form = e.target;
      const fileInput = document.getElementById('importGrantFile');
      const previewDiv = document.getElementById('importGrantPreview');
      previewDiv.innerHTML = '';
      if (!fileInput.files.length) {
        previewDiv.innerHTML = '<div class="alert alert-danger">Please select a file.</div>';
        return;
      }
      const formData = new FormData();
      formData.append('file', fileInput.files[0]);
      // Get CSRF token from meta tag if present
      const csrfToken = document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '<%= csrfToken %>';
      fetch('/import/grants', {
        method: 'POST',
        headers: csrfToken ? { 'CSRF-Token': csrfToken } : {},
        body: formData
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          let html = `<div class='alert alert-success'>${data.count} grants ready to import.</div>`;
          html += '<table class="table table-sm table-bordered"><thead><tr><th>Email</th><th>Grant Date</th><th>Share Amount</th></tr></thead><tbody>';
          data.preview.forEach(row => {
            html += `<tr><td>${row.email}</td><td>${row.grant_date}</td><td>${row.share_amount}</td></tr>`;
          });
          html += '</tbody></table>';
          previewDiv.innerHTML = html;
          // Disable file input and preview button
          fileInput.disabled = true;
          form.querySelector('button[type="submit"]').style.display = 'none';
          // Show Import button
          let importBtn = document.createElement('button');
          importBtn.className = 'btn btn-success';
          importBtn.id = 'commitGrantImportBtn';
          importBtn.textContent = 'Import';
          form.querySelector('.modal-footer').insertBefore(importBtn, form.querySelector('.btn-secondary').nextSibling);
          importBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fetch('/import/grants/commit', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': csrfToken
              },
              body: JSON.stringify({ grants: data.preview })
            })
            .then(res => res.json())
            .then(result => {
              if (result.success) {
                previewDiv.innerHTML = `<div class='alert alert-success'>${result.count} grants imported successfully.</div>`;
                setTimeout(() => { location.reload(); }, 1500);
              } else {
                let html = `<div class='alert alert-danger'>${result.message || 'Import failed.'}</div>`;
                if (result.errors) {
                  html += '<ul>';
                  result.errors.forEach(err => {
                    html += `<li>Row ${err.row}: ${err.errors.join(', ')}</li>`;
                  });
                  html += '</ul>';
                }
                previewDiv.innerHTML = html;
              }
            })
            .catch(err => {
              previewDiv.innerHTML = `<div class='alert alert-danger'>Error: ${err.message}</div>`;
            });
          });
        } else {
          let html = `<div class='alert alert-danger'>${data.message || 'Import failed.'}</div>`;
          if (data.errors) {
            html += '<ul>';
            data.errors.forEach(err => {
              html += `<li>Row ${err.row}: ${err.errors.join(', ')}</li>`;
            });
            html += '</ul>';
          }
          previewDiv.innerHTML = html;
        }
      })
      .catch(err => {
        previewDiv.innerHTML = `<div class='alert alert-danger'>Error: ${err.message}</div>`;
      });
    });
  }

  // Reset the import grants modal on open
  document.getElementById('importGrantsModal').addEventListener('show.bs.modal', function () {
    const fileInput = document.getElementById('importGrantFile');
    const previewDiv = document.getElementById('importGrantPreview');
    fileInput.value = '';
    fileInput.disabled = false;
    previewDiv.innerHTML = '';
    // Show the preview button again
    const previewBtn = document.querySelector('#importGrantsForm button[type="submit"]');
    if (previewBtn) previewBtn.style.display = '';
    // Remove any dynamically added Import button
    const importBtn = document.getElementById('commitGrantImportBtn');
    if (importBtn) importBtn.remove();
  });
</script> 