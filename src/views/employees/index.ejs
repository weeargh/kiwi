<div class="row">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-header d-flex justify-content-between align-items-center py-3">
        <h6 class="mb-0 fw-bold">Employees</h6>
        <div>
          <a href="/employees/new" class="btn btn-sm btn-primary">
            <i class="bi bi-plus-lg me-1"></i> Add Employee
          </a>
          <% if (user && user.role === 'admin') { %>
            <button class="btn btn-sm btn-outline-success ms-1" data-bs-toggle="modal" data-bs-target="#importEmployeesModal">
              <i class="bi bi-upload me-1"></i> Import Employees
            </button>
            <a href="/templates/employees-import-template.xlsx" class="btn btn-link btn-sm ms-1">Download Template</a>
          <% } %>
          <% if (employees.length > 0) { %>
            <button class="btn btn-sm btn-outline-primary ms-1" id="exportEmployeesBtn">
              <i class="bi bi-download me-1"></i> Export
            </button>
          <% } %>
        </div>
      </div>
      
      <div class="card-body p-0">
        <!-- Filters -->
        <div class="p-3 border-bottom">
          <form action="/employees" method="GET" class="row g-2 align-items-center">
            <div class="col-md-5">
              <div class="input-group">
                <input 
                  type="text" 
                  class="form-control" 
                  placeholder="Search by name or email" 
                  name="search" 
                  value="<%= filters.search %>"
                >
                <button class="btn btn-outline-secondary" type="submit">
                  <i class="bi bi-search"></i>
                </button>
              </div>
            </div>
            
            <div class="col-md-3">
              <select class="form-select" name="status" id="employeeStatusFilter">
                <option value="all" <%= filters.status === 'all' ? 'selected' : '' %>>All Status</option>
                <option value="active" <%= (!filters.status || filters.status === 'active') ? 'selected' : '' %>>Active</option>
                <option value="terminated" <%= filters.status === 'terminated' ? 'selected' : '' %>>Terminated</option>
              </select>
            </div>
            
            <div class="col-md-4 text-md-end d-flex align-items-center justify-content-end gap-2">
              <% if (totalCount > 0) { %>
                <span class="text-muted"><%= totalCount %> employee<%= totalCount !== 1 ? 's' : '' %> found</span>
              <% } %>
              <% if (filters.search || (filters.status && filters.status !== 'all')) { %>
                <a href="/employees" class="btn btn-link btn-sm ms-2">Clear Filters</a>
              <% } %>
            </div>
          </form>
        </div>
        
        <!-- Employee Table -->
        <div class="table-responsive">
          <table class="table table-hover mb-0" id="employeesTable">
            <thead class="table-light">
              <tr>
                <th>
                  <a href="/employees?page=1&search=<%= filters.search %>&status=<%= filters.status %>&sort=<%= filters.sort === 'first_name_asc' ? 'first_name_desc' : 'first_name_asc' %>" class="text-decoration-none">
                    First Name
                    <% if (filters.sort && filters.sort.startsWith('first_name')) { %>
                      <i class="bi <%= filters.sort === 'first_name_asc' ? 'bi-caret-up-fill' : 'bi-caret-down-fill' %>"></i>
                    <% } %>
                  </a>
                  /
                  <a href="/employees?page=1&search=<%= filters.search %>&status=<%= filters.status %>&sort=<%= filters.sort === 'last_name_asc' ? 'last_name_desc' : 'last_name_asc' %>" class="text-decoration-none">
                    Last Name
                    <% if (filters.sort && filters.sort.startsWith('last_name')) { %>
                      <i class="bi <%= filters.sort === 'last_name_asc' ? 'bi-caret-up-fill' : 'bi-caret-down-fill' %>"></i>
                    <% } %>
                  </a>
                </th>
                <th>Email</th>
                <th>Status</th>
                <th>Grants</th>
                <th>Created At</th>
                <th class="text-end">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% if (employees.length > 0) { %>
                <% employees.forEach(function(employee) { %>
                  <tr>
                    <td>
                      <a href="/employees/<%= employee.uid %>" class="text-decoration-none">
                        <%= employee.firstName %> <%= employee.lastName %>
                      </a>
                    </td>
                    <td><%= employee.email %></td>
                    <td>
                      <% if (employee.status === 'active') { %>
                        <span class="badge bg-success">Active</span>
                      <% } else if (employee.status === 'terminated') { %>
                        <span class="badge bg-danger">Terminated</span>
                      <% } else { %>
                        <span class="badge bg-secondary">Inactive</span>
                      <% } %>
                    </td>
                    <td>
                      <% if (employee.grantCount > 0) { %>
                        <span class="badge bg-warning text-success rounded-circle px-2" style="font-size: 0.875rem; min-width: 2rem;"> <%= employee.grantCount %> </span>
                      <% } else { %>
                        <span class="text-muted">â€”</span>
                      <% } %>
                    </td>
                    <td><%= employee.createdAt %></td>
                    <td class="text-end">
                      <div class="btn-group btn-group-sm">
                        <a href="/employees/<%= employee.uid %>" class="btn btn-outline-secondary" data-bs-toggle="tooltip" title="View Details">
                          <i class="bi bi-eye"></i>
                        </a>
                        <a href="/employees/<%= employee.uid %>/edit" class="btn btn-outline-secondary" data-bs-toggle="tooltip" title="Edit">
                          <i class="bi bi-pencil"></i>
                        </a>
                        <% if (employee.grantCount === 0) { %>
                          <button 
                            type="button" 
                            class="btn btn-outline-danger" 
                            data-bs-toggle="modal" 
                            data-bs-target="#deleteModal" 
                            data-employee-uid="<%= employee.uid %>"
                            data-employee-name="<%= employee.firstName %> <%= employee.lastName %>"
                            title="Delete"
                          >
                            <i class="bi bi-trash"></i>
                          </button>
                        <% } %>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="6" class="text-center py-3">
                    <% if (filters.search || filters.status !== 'all') { %>
                      No employees found matching your search criteria.
                      <a href="/employees">Clear filters</a>
                    <% } else { %>
                      No employees have been added yet.
                      <a href="/employees/new">Add your first employee</a>
                    <% } %>
                  </td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
      </div>
      
      <% if (pagination.total > 1) { %>
        <div class="card-footer">
          <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center mb-0">
              <li class="page-item <%= pagination.hasPrev ? '' : 'disabled' %>">
                <a class="page-link" href="/employees?page=<%= pagination.prev %>&search=<%= filters.search %>&status=<%= filters.status %>" tabindex="-1" aria-disabled="<%= !pagination.hasPrev %>">Previous</a>
              </li>
              <% let window = 2; %>
              <% let start = Math.max(1, pagination.current - window); %>
              <% let end = Math.min(pagination.total, pagination.current + window); %>
              <% if (start > 1) { %>
                <li class="page-item"><a class="page-link" href="/employees?page=1&search=<%= filters.search %>&status=<%= filters.status %>">1</a></li>
                <% if (start > 2) { %>
                  <li class="page-item disabled"><span class="page-link">&hellip;</span></li>
                <% } %>
              <% } %>
              <% for (let i = start; i <= end; i++) { %>
                <li class="page-item <%= pagination.current === i ? 'active' : '' %>">
                  <a class="page-link" href="/employees?page=<%= i %>&search=<%= filters.search %>&status=<%= filters.status %>"><%= i %></a>
                </li>
              <% } %>
              <% if (end < pagination.total) { %>
                <% if (end < pagination.total - 1) { %>
                  <li class="page-item disabled"><span class="page-link">&hellip;</span></li>
                <% } %>
                <li class="page-item"><a class="page-link" href="/employees?page=<%= pagination.total %>&search=<%= filters.search %>&status=<%= filters.status %>"><%= pagination.total %></a></li>
              <% } %>
              <li class="page-item <%= pagination.hasNext ? '' : 'disabled' %>">
                <a class="page-link" href="/employees?page=<%= pagination.next %>&search=<%= filters.search %>&status=<%= filters.status %>">Next</a>
              </li>
            </ul>
          </nav>
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete the employee <strong id="employeeName"></strong>?</p>
        <p class="text-danger">This action cannot be undone!</p>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <form id="deleteForm" action="" method="POST">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <button type="submit" class="btn btn-danger">Delete</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Import Employees Modal -->
<div class="modal fade" id="importEmployeesModal" tabindex="-1" aria-labelledby="importEmployeesModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <form id="importEmployeesForm" enctype="multipart/form-data">
        <div class="modal-header">
          <h5 class="modal-title" id="importEmployeesModalLabel">Import Employees</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="importFile" class="form-label">Select Excel or CSV file</label>
            <input type="file" class="form-control" id="importFile" name="file" accept=".xlsx,.csv" required>
          </div>
          <div id="importPreview" class="mt-3"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-success">Preview Import</button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  // Set up delete modal
  const deleteModal = document.getElementById('deleteModal');
  if (deleteModal) {
    deleteModal.addEventListener('show.bs.modal', event => {
      const button = event.relatedTarget;
      const employeeUid = button.getAttribute('data-employee-uid');
      const employeeName = button.getAttribute('data-employee-name');
      
      document.getElementById('employeeName').textContent = employeeName;
      document.getElementById('deleteForm').action = `/employees/${employeeUid}/delete`;
    });
  }
  
  // Export table to CSV
  function exportToCSV() {
    const table = document.getElementById('employeesTable');
    let csv = [];
    
    // Get column headers
    const headers = [];
    const headerRow = table.querySelectorAll('thead th');
    for (let i = 0; i < headerRow.length - 1; i++) { // Skip the Actions column
      headers.push(headerRow[i].textContent.trim());
    }
    csv.push(headers.join(','));
    
    // Get table data
    const rows = table.querySelectorAll('tbody tr');
    for (let i = 0; i < rows.length; i++) {
      const row = [];
      const cells = rows[i].querySelectorAll('td');
      
      // Skip empty state row
      if (cells.length === 1) continue;
      
      for (let j = 0; j < cells.length - 1; j++) { // Skip the Actions column
        let cell = cells[j].textContent.trim();
        
        // Escape commas and quotes
        cell = cell.replace(/"/g, '""');
        if (cell.includes(',') || cell.includes('"') || cell.includes('\n')) {
          cell = `"${cell}"`;
        }
        
        row.push(cell);
      }
      
      csv.push(row.join(','));
    }
    
    // Create CSV file
    const csvContent = csv.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    
    // Create download link and click it
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', 'employees.csv');
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Add event listener for export button
  document.addEventListener('DOMContentLoaded', function() {
    var exportBtn = document.getElementById('exportEmployeesBtn');
    if (exportBtn) {
      exportBtn.addEventListener('click', function(e) {
        e.preventDefault();
        exportToCSV();
      });
    }
    var statusFilter = document.getElementById('employeeStatusFilter');
    if (statusFilter) {
      statusFilter.addEventListener('change', function() {
        this.form.submit();
      });
    }
  });

  var importForm = document.getElementById('importEmployeesForm');
  if (importForm) {
    importForm.addEventListener('submit', function(e) {
      e.preventDefault();
      const form = e.target;
      const fileInput = document.getElementById('importFile');
      const previewDiv = document.getElementById('importPreview');
      previewDiv.innerHTML = '';
      if (!fileInput.files.length) {
        previewDiv.innerHTML = '<div class="alert alert-danger">Please select a file.</div>';
        return;
      }
      const formData = new FormData();
      formData.append('file', fileInput.files[0]);
      fetch('/import/employees', {
        method: 'POST',
        headers: { 'CSRF-Token': '<%= csrfToken %>' },
        body: formData
      })
      .then(res => res.json())
      .then(data => {
        if (data.success) {
          let html = `<div class='alert alert-success'>${data.count} employees ready to import.</div>`;
          html += '<table class="table table-sm table-bordered"><thead><tr><th>Email</th><th>First Name</th><th>Last Name</th><th>Status</th></tr></thead><tbody>';
          data.preview.forEach(row => {
            html += `<tr><td>${row.email}</td><td>${row.first_name}</td><td>${row.last_name}</td><td>${row.status}</td></tr>`;
          });
          html += '</tbody></table>';
          previewDiv.innerHTML = html;
          // Disable file input and preview button
          fileInput.disabled = true;
          form.querySelector('button[type="submit"]').style.display = 'none';
          // Show Import button
          let importBtn = document.createElement('button');
          importBtn.className = 'btn btn-success';
          importBtn.id = 'commitImportBtn';
          importBtn.textContent = 'Import';
          form.querySelector('.modal-footer').insertBefore(importBtn, form.querySelector('.btn-secondary').nextSibling);
          importBtn.addEventListener('click', function(e) {
            e.preventDefault();
            fetch('/import/employees/commit', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'CSRF-Token': '<%= csrfToken %>'
              },
              body: JSON.stringify({ employees: data.preview })
            })
            .then(res => res.json())
            .then(result => {
              if (result.success) {
                previewDiv.innerHTML = `<div class='alert alert-success'>${result.count} employees imported successfully.</div>`;
                setTimeout(() => { location.reload(); }, 1500);
              } else {
                let html = `<div class='alert alert-danger'>${result.message || 'Import failed.'}</div>`;
                if (result.errors) {
                  html += '<ul>';
                  result.errors.forEach(err => {
                    html += `<li>Row ${err.row}: ${err.errors.join(', ')}</li>`;
                  });
                  html += '</ul>';
                }
                previewDiv.innerHTML = html;
              }
            })
            .catch(err => {
              previewDiv.innerHTML = `<div class='alert alert-danger'>Error: ${err.message}</div>`;
            });
          });
        } else {
          let html = `<div class='alert alert-danger'>${data.message || 'Import failed.'}</div>`;
          if (data.errors) {
            html += '<ul>';
            data.errors.forEach(err => {
              html += `<li>Row ${err.row}: ${err.errors.join(', ')}</li>`;
            });
            html += '</ul>';
          }
          previewDiv.innerHTML = html;
        }
      })
      .catch(err => {
        previewDiv.innerHTML = `<div class='alert alert-danger'>Error: ${err.message}</div>`;
      });
    });
  }
</script> 